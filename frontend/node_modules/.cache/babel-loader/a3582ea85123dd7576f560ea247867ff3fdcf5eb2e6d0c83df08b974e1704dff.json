{"ast":null,"code":"const BASE_URL = 'https://auth.nomoreparties.co';\nexport const register = (email, password) => {\n  console.log(email, password);\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      console.log(res.status);\n    }\n  }).then(res => {\n    console.log(res);\n    return res;\n  });\n};\nexport const authrize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    }).then(res => {\n      if (res.status === 200) {\n        return res.json();\n      } else {\n        console.log(res.status);\n      }\n    }).then(data => {\n      if (data.jwt) {\n        localStorage.setItem('jwt', data.jwt);\n        return data;\n      } else {\n        return;\n      }\n    })\n  }).catch(e => console.log(e));\n};\nexport const tokenVerification = () => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${localStorage.getItem('jwt')}`\n    }\n  }).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      console.log(res.status);\n    }\n  }).then(data => {\n    return data;\n  });\n};","map":{"version":3,"names":["BASE_URL","register","email","password","console","log","fetch","method","headers","body","JSON","stringify","then","res","status","json","authrize","data","jwt","localStorage","setItem","catch","e","tokenVerification","authorization","getItem"],"sources":["D:/mesto-react/mesto-react/src/auth.js"],"sourcesContent":["\r\nconst BASE_URL = 'https://auth.nomoreparties.co';\r\n\r\nexport const register = (email, password) => {\r\n    console.log(email, password)\r\n    return fetch(`${BASE_URL}/signup`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            password,\r\n            email\r\n        })\r\n    }).then(res => {\r\n        if(res.status === 200) {\r\n            return res.json();\r\n        } else {\r\n            console.log(res.status)\r\n        }\r\n    }).then(res => {\r\n        console.log(res);\r\n        return res;\r\n    })\r\n}\r\n\r\nexport const authrize = (email, password) => {\r\n    return fetch(`${BASE_URL}/signin`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            password,\r\n            email\r\n        }).then(res => {\r\n            if(res.status === 200) {\r\n                return res.json();\r\n            } else {\r\n                console.log(res.status)\r\n            }\r\n        }).then(data => {\r\n            if (data.jwt) {\r\n                localStorage.setItem('jwt', data.jwt);\r\n                return data;\r\n            } else {\r\n                return;\r\n            }\r\n        })\r\n    }).catch(e => console.log(e))\r\n}\r\n\r\nexport const tokenVerification = () => {\r\n    return fetch(`${BASE_URL}/users/me`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            authorization: `Bearer ${localStorage.getItem('jwt')}`\r\n        }\r\n    }).then(res => {\r\n        if(res.status === 200) {\r\n            return res.json();\r\n        } else {\r\n            console.log(res.status)\r\n        }\r\n    }).then(data => {\r\n        return data;\r\n    })\r\n}\r\n"],"mappings":"AACA,MAAMA,QAAQ,GAAG,+BAA+B;AAEhD,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACzCC,OAAO,CAACC,GAAG,CAACH,KAAK,EAAEC,QAAQ,CAAC;EAC5B,OAAOG,KAAK,CAAE,GAAEN,QAAS,SAAQ,EAAE;IAC/BO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBR,QAAQ;MACRD;IACJ,CAAC;EACL,CAAC,CAAC,CAACU,IAAI,CAACC,GAAG,IAAI;IACX,IAAGA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;MACnB,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACrB,CAAC,MAAM;MACHX,OAAO,CAACC,GAAG,CAACQ,GAAG,CAACC,MAAM,CAAC;IAC3B;EACJ,CAAC,CAAC,CAACF,IAAI,CAACC,GAAG,IAAI;IACXT,OAAO,CAACC,GAAG,CAACQ,GAAG,CAAC;IAChB,OAAOA,GAAG;EACd,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMG,QAAQ,GAAGA,CAACd,KAAK,EAAEC,QAAQ,KAAK;EACzC,OAAOG,KAAK,CAAE,GAAEN,QAAS,SAAQ,EAAE;IAC/BO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBR,QAAQ;MACRD;IACJ,CAAC,CAAC,CAACU,IAAI,CAACC,GAAG,IAAI;MACX,IAAGA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;QACnB,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;MACrB,CAAC,MAAM;QACHX,OAAO,CAACC,GAAG,CAACQ,GAAG,CAACC,MAAM,CAAC;MAC3B;IACJ,CAAC,CAAC,CAACF,IAAI,CAACK,IAAI,IAAI;MACZ,IAAIA,IAAI,CAACC,GAAG,EAAE;QACVC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEH,IAAI,CAACC,GAAG,CAAC;QACrC,OAAOD,IAAI;MACf,CAAC,MAAM;QACH;MACJ;IACJ,CAAC;EACL,CAAC,CAAC,CAACI,KAAK,CAACC,CAAC,IAAIlB,OAAO,CAACC,GAAG,CAACiB,CAAC,CAAC,CAAC;AACjC,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EACnC,OAAOjB,KAAK,CAAE,GAAEN,QAAS,WAAU,EAAE;IACjCO,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClCgB,aAAa,EAAG,UAASL,YAAY,CAACM,OAAO,CAAC,KAAK,CAAE;IACzD;EACJ,CAAC,CAAC,CAACb,IAAI,CAACC,GAAG,IAAI;IACX,IAAGA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;MACnB,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACrB,CAAC,MAAM;MACHX,OAAO,CAACC,GAAG,CAACQ,GAAG,CAACC,MAAM,CAAC;IAC3B;EACJ,CAAC,CAAC,CAACF,IAAI,CAACK,IAAI,IAAI;IACZ,OAAOA,IAAI;EACf,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}